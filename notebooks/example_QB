{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hM0qTCzT0_x8"
   },
   "source": [
    "# Quiescent Background\n",
    "This algorithm can be used to determine the quescient background in a light curve/ time series. <br>\n",
    "original reference: Meyer et al. 2019 (https://ui.adsabs.harvard.edu/abs/2019HEAD...1710672M/abstract)<br>\n",
    "original code: Manuel Meyer (https://github.com/me-manu/GaRLiC)\n",
    "\n",
    "\n",
    "#### Procedure:\n",
    "1. sort flux (error) array and set range for QB value\n",
    "2. create flux_grid within range for QB value\n",
    "3. iterate through flux_grid and determine CDF of flux weights on equivalent intervals on left and right side of each grid value\n",
    "4. idea: best value for QB is where the CDFs of both intervals are most similar <br> $\\rightarrow$ quantify similarity with:\n",
    "  * ks\n",
    "  * sumsq\n",
    "  * sumsqpy\n",
    "  * wolpert_jeff\n",
    "5. determine QB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "qOOUzrrB08tH"
   },
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.special import gammaln \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_B8BkmBQ4KOA"
   },
   "source": [
    "### 0. Data\n",
    "use exemplary data or insert your data here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 253
    },
    "id": "bEaG4IQy02TN",
    "outputId": "f5ea2a9b-e3a0-4ba3-d04d-f87fcf421b6b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'flux')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lc = np.load('../bsp_data/bsp_lc.npy', allow_pickle=True)\n",
    "time = lc[0]\n",
    "flux = lc[1]\n",
    "flux_error = lc[2]\n",
    "\n",
    "plt.figure(0,(14,3))\n",
    "plt.plot(time, flux, linewidth=0.1, marker='+')\n",
    "plt.xlabel('time')\n",
    "plt.ylabel('flux')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i5D9UwWG4Xyl"
   },
   "source": [
    "### 1. sort flux (error) array and set range for QB value\n",
    "value range = consider flux values between some min and the mean; this is where flux grid will be defined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "PLLPNHQa4G-o"
   },
   "outputs": [],
   "source": [
    "# ------ Set Parameters ------\n",
    "flux_vec = flux \n",
    "# array-like\n",
    "# array of flux values\n",
    "\n",
    "weight_vec = 1/flux_error \n",
    "# array-like (optional)\n",
    "# array with weights for fluxes (same shape as flux_vec)\n",
    "\n",
    "fudge_factor = 0.1\n",
    "# float (optional)\n",
    "# factor to avoid some trouble just above the flux minimum. \n",
    "# ----------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "hEGjbiB-3nrA"
   },
   "outputs": [],
   "source": [
    "if weight_vec is None: \n",
    "    weight_vec = np.ones_like(flux_vec)\n",
    "\n",
    "id_sort = np.argsort(flux_vec)\n",
    "flux_vec = np.sort(flux_vec) \n",
    "weight_vec = weight_vec[id_sort]\n",
    "flux_mean = flux_vec.mean() # or median\n",
    "flux_min_use = flux_vec[0] + fudge_factor * ( flux_mean - flux_vec[0] ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 312
    },
    "id": "ZHIcSIfR6CsJ",
    "outputId": "edecb586-fced-4aa1-82bb-00cec1b10dfa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'counts')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('observed flux distribution')\n",
    "c,v,p = plt.hist(flux_vec, bins=30, log=True, histtype= 'step', color='k', label='flux')\n",
    "plt.vlines(flux_mean, ymin=min(c), ymax=max(c), linewidth=2, color='coral', label='mean')\n",
    "plt.vlines(flux_min_use, ymin=min(c), ymax=max(c), linewidth=2, color='coral', label='min')\n",
    "plt.legend()\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('counts')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "toQG2qzM6_lJ"
   },
   "source": [
    "### 2. create flux_grid\n",
    "either all values contained in range or num_grid equally spaced values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "id": "kRj8tNQD6skJ"
   },
   "outputs": [],
   "source": [
    "# ------ Set Parameters ------\n",
    "num_grid = 0\n",
    "# size of flux array tested for the peak of the symmetric \n",
    "# quiescent flux i.e. suspicion that qb is within that range. \n",
    "# If zero, use the measured flux values\n",
    "# ----------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "tZjMQ5Ad7qiq"
   },
   "outputs": [],
   "source": [
    "if num_grid: \n",
    "    flux_grid = np.linspace(flux_min_use, flux_mean, num_grid)\n",
    "else: \n",
    "    flux_grid = flux_vec[np.where(flux_vec >= flux_min_use)[0][0]:np.where(flux_vec <= flux_mean)[0][-1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 312
    },
    "id": "Di_SGQt77-nZ",
    "outputId": "a1921943-7ec4-4bfd-8faf-e07ab06630ce"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'counts')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_hist_selected(vals_all, vals_select, bins_select):\n",
    "    #create two in one histogram with bins based on selected portion\n",
    "    val, binz = np.histogram(vals_select, bins=bins_select)\n",
    "    bin_width = binz[1] - binz[0]\n",
    "    left_shift = math.ceil((vals_select[0] - vals_all[0])/bin_width)\n",
    "\n",
    "    b = binz[0] - left_shift * bin_width\n",
    "    binzz = [b]\n",
    "    while b <= vals_all[-1]:\n",
    "        b += bin_width\n",
    "        binzz.append(b)\n",
    "        \n",
    "    c,v,p = plt.hist(vals_all, bins=binzz, log=True, histtype= 'step', color='k', label='flux')\n",
    "    plt.hist(vals_select, bins=binz, log=True, color='lavender', label='flux_grid', zorder=0)\n",
    "    plt.xlim(0,1e-6)\n",
    "    return(c)\n",
    "\n",
    "plt.title('flux range considered for QB')\n",
    "if num_grid:\n",
    "    c = plot_hist_selected(flux_vec, flux_grid, num_grid)\n",
    "else:\n",
    "    c = plot_hist_selected(flux_vec, flux_grid, 50)\n",
    "plt.vlines(flux_mean, ymin=min(c), ymax=max(c), linewidth=2, color='coral', label='mean')\n",
    "plt.vlines(flux_min_use, ymin=min(c), ymax=max(c), linewidth=2, color='coral', label='min')\n",
    "plt.legend()\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('counts')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "drgEIuod-Gy3"
   },
   "source": [
    "### 3. iterate through flux_grid and determine CDF (of flux weights) on left and right side of each value \n",
    "create equal, linear interval on both sides of each grid value with num_bins bins between lowest flux and grid value + lowest flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "IQhKiKfm8MlG"
   },
   "outputs": [],
   "source": [
    "# ------ Set Parameters ------\n",
    "num_bins = 100\n",
    "# number of bins for high and low flux arrays\n",
    "# ----------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "id": "UvwYXBU6PoFi"
   },
   "outputs": [],
   "source": [
    "def compute_cdf(flux_grid, f_indx, flux_vec, weight_vec, num_bins):\n",
    "    flux_val = flux_grid[f_indx] \n",
    "    dt_low = flux_val - flux_vec[0]\n",
    "    flux_high = flux_val + dt_low \n",
    "    flux_lo_vec = np.linspace(flux_vec[0], flux_val, num_bins)\n",
    "    flux_hi_vec = np.linspace(flux_val, flux_high, num_bins)\n",
    "\n",
    "    cdf_hi = np.zeros(flux_hi_vec.size - 1)\n",
    "    cdf_lo = np.zeros(flux_lo_vec.size - 1)\n",
    "    for ii_bin in range(num_bins - 1):\n",
    "        id_lo = flux_vec <= flux_lo_vec[ii_bin]\n",
    "        id_hi = (flux_vec >= flux_hi_vec[ii_bin]) & (flux_vec <= flux_high)\n",
    "        cdf_hi[ii_bin] = np.sum(weight_vec[id_hi])\n",
    "        cdf_lo[ii_bin] = np.sum(weight_vec[id_lo]) # based on weights!\n",
    "        cdf_hi_r = cdf_hi[::-1] # reverse the high cdf\n",
    "\n",
    "    cdf_lo_norm = cdf_lo/cdf_lo[-1]\n",
    "    cdf_hi_norm = cdf_hi/cdf_hi[0]\n",
    "    cdf_hi_r_norm = cdf_hi_r/cdf_hi_r[-1] \n",
    "\n",
    "    return (cdf_lo_norm, cdf_hi_norm, cdf_hi_r_norm, \n",
    "            flux_lo_vec[:-1], flux_hi_vec[:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 760
    },
    "id": "xINjGgea-aHN",
    "outputId": "dea9633d-bcbb-4056-dee1-f3f758bd58b7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'norm. counts')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# for example the nth grid value:\n",
    "n = 40\n",
    "flux_val = flux_grid[n] \n",
    "dt_low = flux_val - flux_vec[0]\n",
    "flux_high = flux_val + dt_low\n",
    "flux_lo_vec = np.linspace(flux_vec[0], flux_val, num_bins)\n",
    "flux_hi_vec = np.linspace(flux_val, flux_high, num_bins)\n",
    "\n",
    "cdf_lo_norm, cdf_hi_norm, cdf_hi_r_norm, x_lo, x_hi = compute_cdf(flux_grid, n, flux_vec, weight_vec, num_bins)\n",
    "\n",
    "plt.figure(0)\n",
    "plt.title(f'the {n}th grid value and its intervals')\n",
    "plot_hist_selected(flux_vec, flux_grid, 50)\n",
    "plt.vlines(flux_val, ymin=min(c), ymax=max(c), color='mediumpurple', label=f'{n}th value')\n",
    "plt.vlines(flux_vec[0], ymin=min(c), ymax=max(c), color='indigo', label='flux_lo = flux_vec[0]')\n",
    "plt.vlines(flux_high, ymin=min(c), ymax=max(c), color='indigo', label='flux_hi')\n",
    "plt.legend()\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('counts')\n",
    "        \n",
    "plt.figure(1,(15,2))\n",
    "plt.title(f'num grid on intervals of the {n}th grid value')\n",
    "plot_hist_selected(flux_vec, flux_grid, 100)\n",
    "plt.vlines(flux_val, ymin=min(c), ymax=max(c), color='mediumpurple', label=f'{n}th value')\n",
    "plt.vlines(flux_vec[0], ymin=min(c), ymax=max(c), color='indigo', label='flux_lo = flux_vec[0]')\n",
    "plt.vlines(flux_high, ymin=min(c), ymax=max(c), color='indigo', label='flux_hi')\n",
    "plt.vlines(flux_lo_vec, ymin=min(c), ymax=max(c), linewidth=0.5, color='mediumseagreen')\n",
    "plt.vlines(flux_lo_vec[0], ymin=min(c), ymax=max(c), linewidth=0.5, color='mediumseagreen', label='flux_lo_vec = CDF bins')\n",
    "plt.vlines(flux_hi_vec, ymin=min(c), ymax=max(c), linewidth=0.5, color='hotpink')\n",
    "plt.vlines(flux_hi_vec[0], ymin=min(c), ymax=max(c), linewidth=0.5, color='hotpink', label='flux_lo_vec = CDF bins')\n",
    "plt.xlim(0, flux_high + flux_vec[0])\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('counts')\n",
    "\n",
    "plt.figure(2)\n",
    "plt.title(f'normalized CDFs for the {n}th grid value')\n",
    "plt.plot(flux_lo_vec[:-1], cdf_lo_norm, color='mediumseagreen', label='cdf_lo')\n",
    "plt.plot(flux_hi_vec[:-1], cdf_hi_norm, color='hotpink', label='cdf_hi')\n",
    "plt.plot(flux_lo_vec[:-1], cdf_hi_r_norm, color='hotpink', label='cdf_hi_r')\n",
    "plt.vlines(flux_val, ymin=0, ymax=1, color='mediumpurple', label=f'{n}th value')\n",
    "plt.vlines(flux_vec[0], ymin=0, ymax=1, color='indigo', label='flux_lo = flux_vec[0]')\n",
    "plt.vlines(flux_high, ymin=0, ymax=1, color='indigo', label='flux_hi')\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('norm. counts')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OQatil4FBcAU"
   },
   "source": [
    "### 4. quantify similarity of cdfs for each grid value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "AG-aOM9hBY8c"
   },
   "outputs": [],
   "source": [
    "# ------ Set Parameters ------\n",
    "stat = 'wolpert_jeff'\n",
    "# statistic used to optimize test. Options are\n",
    "# 'ks' : komlogorov smirnov test, \n",
    "# 'sumsq': sum of squared differences (Jeff's matlab code)\n",
    "# 'sumsqpy': a python version of Jeff's matlab code\n",
    "# 'wolpert_jeff'\n",
    "# ----------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "3rKjG7q_BZxJ"
   },
   "outputs": [],
   "source": [
    "def pks(z):\n",
    "    \"\"\"Compute KS distribution, see numerical recipes Eq. 6.14.56/57\"\"\"\n",
    "    if z < 0.:\n",
    "        raise ValueError(\"bad z in KSdist\")\n",
    "    if z == 0.:\n",
    "        return 0.;\n",
    "    if z < 1.18:\n",
    "        y = np.exp(-1.23370055013616983/(z * z))\n",
    "        return 2.25675833419102515*np.sqrt(-np.log(y)) \\\n",
    "                    *(y + np.power(y,9) + np.power(y,25) + np.power(y,49))\n",
    "    else:\n",
    "        x = np.exp(-2.*z*z)\n",
    "        return 1. - 2.*(x - np.power(x,4) + np.power(x,9));\n",
    "    \n",
    "    \n",
    "def qks(z):\n",
    "    \"\"\"Compute complemement of KS distribution, see numerical recipes Eq. 6.14.56/57\"\"\"\n",
    "    if z < 0.:\n",
    "        raise ValueError(\"bad z in KSdist\")\n",
    "    if z == 0.:\n",
    "        return 1.\n",
    "    if z < 1.18: \n",
    "        return 1.-pks(z);\n",
    "    x = np.exp(-2.*z*z)\n",
    "    return 2.*(x - np.power(x,4) + np.power(x,9))\n",
    "\n",
    "\n",
    "def wolpert(h1, h2, axis = 0):\n",
    "    \"\"\"\n",
    "    Calculate the ratio of posteriors using the algorithm of Wolpert (1995), \n",
    "    see his Eq. (11)\n",
    "    Parameters\n",
    "    ----------\n",
    "    h1: array-like\n",
    "        first histogram of data \n",
    "    h2: array-like\n",
    "        second histogram of data \n",
    "    axis: int or None (optional) \n",
    "        Used when stack of histograms is provided as 2d array.\n",
    "        In this case, axis specifies the axis of the histograms\n",
    "        (vs the axis of the different cases). Default: 0\n",
    "    Returns \n",
    "    -------\n",
    "    log10 of posterior ratio of Pr(same) / Pr(different)\n",
    "    \"\"\"\n",
    "    if not np.all(np.equal(h1.shape, h2.shape)):\n",
    "        raise ValueError(\"Histrogams must have same shape!\")\n",
    "    n1 = h1.sum(axis = axis)\n",
    "    n2 = h2.sum(axis = axis)\n",
    "    num_bins = h1.shape[axis]\n",
    "    # log of eq (10) divided by first factor of eq. (9) \n",
    "    # [gammaln is ln of the gamma function;\n",
    "    #  remember n! = gamma( n + 1) ]\n",
    "    log_common = gammaln(n1 + num_bins) + gammaln(n2 + num_bins) -\\\n",
    "        gammaln(num_bins) - gammaln(n1 + n2 + num_bins) \n",
    "    # log of second factor in eq. (9)\n",
    "    log_hist = gammaln(h1 + h2 + 1) - gammaln(h1 + 1) - gammaln(h2 + 1) \n",
    "    # Combine and convert to base-10 log\n",
    "    log_odds_ratio = np.log10(np.exp(1.)) * (log_common + np.sum(log_hist, axis = axis))\n",
    "    return log_odds_ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "id": "C8M-9yoz_Pef"
   },
   "outputs": [],
   "source": [
    "flux_asym = np.ones_like(flux_grid) * np.nan\n",
    "# measure of asymmetry of both intervals\n",
    "\n",
    "for f_indx in range(flux_grid.size):\n",
    "        flux_val = flux_grid[f_indx] \n",
    "        dt_low = flux_val - flux_vec[0]\n",
    "        flux_high = flux_val + dt_low \n",
    "\n",
    "        flux_lo_vec = np.linspace(flux_vec[0], flux_val, num_bins)\n",
    "        flux_hi_vec = np.linspace(flux_val, flux_high, num_bins)\n",
    "\n",
    "        # compute CDF on both sides\n",
    "        if stat == 'sumsq' or stat == 'wolpert_jeff':\n",
    "            cdf_hi = np.zeros(flux_hi_vec.size - 1)\n",
    "            cdf_lo = np.zeros(flux_lo_vec.size - 1)\n",
    "\n",
    "            #check for every bin how many flux values there are whithin interval \"outside\" of bins and create CDF (based on weights!)\n",
    "            for ii_bin in range(num_bins - 1):\n",
    "                id_lo = flux_vec <= flux_lo_vec[ii_bin]\n",
    "                id_hi = (flux_vec >= flux_hi_vec[ii_bin]) & \\\n",
    "                        (flux_vec <= flux_high)\n",
    "                cdf_hi[ii_bin] = np.sum(weight_vec[id_hi])\n",
    "                cdf_lo[ii_bin] = np.sum(weight_vec[id_lo])\n",
    "            cdf_hi = cdf_hi[::-1] # reverse the high cdf\n",
    "\n",
    "            if stat == 'sumsq': #normieren\n",
    "                cdf_hi /= cdf_hi[-1]\n",
    "                cdf_lo /= cdf_lo[-1]\n",
    "                flux_asym[f_indx] = np.sum((cdf_hi - cdf_lo) ** 2.)\n",
    "            else:\n",
    "                flux_asym[f_indx] = -1. * wolpert(cdf_lo / cdf_lo.sum(), cdf_hi / cdf_hi.sum()) \n",
    "\n",
    "        else:\n",
    "            idlo = flux_vec < flux_val\n",
    "            idhi= (flux_vec >= flux_val) & (flux_vec <= flux_high)\n",
    "\n",
    "            cdf_lo = np.concatenate([[0.],np.cumsum(weight_vec[idlo])])\n",
    "            cdf_hi = np.concatenate([[0.],np.cumsum(weight_vec[idhi][::-1])])\n",
    "\n",
    "            cdf_lo /= cdf_lo[-1]\n",
    "            cdf_hi /= cdf_hi[-1]\n",
    "\n",
    "            # convert fluxes below and above peak to array between 0 and 1\n",
    "            xlo = np.concatenate([[0.],(flux_vec[idlo] - flux_vec[idlo][0])/ dt_low])\n",
    "            xhi = (1. - (flux_vec[idhi] - flux_vec[idhi][0])/ dt_low)[::-1]\n",
    "            xhi = np.concatenate([[0.],xhi])\n",
    "\n",
    "            x = np.linspace(0.,1.,num_bins)\n",
    "            # get the bin number where of fine sampled x array \n",
    "            bins_hi = np.digitize(x = x, bins = xhi) - 1\n",
    "            bins_lo = np.digitize(x = x, bins = xlo) - 1\n",
    "            if stat == 'sumsqpy':\n",
    "                flux_asym[f_indx] = np.sum((cdf_hi[bins_hi] - cdf_lo[bins_lo])**2.)\n",
    "\n",
    "            elif stat == 'ks':\n",
    "                d = np.max(np.abs(cdf_hi[bins_hi] - cdf_lo[bins_lo]))\n",
    "                ne = idhi.sum()* idlo.sum() / (idhi.sum() + idlo.sum())\n",
    "                flux_asym[f_indx] = qks((np.sqrt(ne) + 0.12 + 0.11 / np.sqrt(ne))*d)\n",
    "\n",
    "            elif stat == 'wolpert':\n",
    "                # use wolpert algorithm with CDF normalized to integral\n",
    "                chi = cdf_hi[bins_hi] * cdf_hi[-1] / cdf_hi[bins_hi].sum()\n",
    "                clo = cdf_lo[bins_lo]* cdf_lo[-1] / cdf_lo[bins_lo].sum()\n",
    "                flux_asym[f_indx] = -1. * wolpert(clo,chi)\n",
    "\n",
    "          "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hkRSgXPMNTTu"
   },
   "source": [
    "### 5. determine QB\n",
    "flux_val = best grid value (CDFs most similar)<br>\n",
    "flux_quiet = all observed flux values in intervals of best value <br>\n",
    "QB = mean or median of those flux values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 868
    },
    "id": "8u_4YRfrMiHX",
    "outputId": "f2b8960d-84a4-4bf6-cabb-c405c0778ee5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'counts')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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dRvH9vg7Pz+/2mKS1KpXrx67du0Cghe7vvnmm2jZRx99RJ06dVi3bh27du2iTp3aexMlJ2tuZv3NbGxJSUmmQ5EaoqzG0NjUp4JG43Byd4qKilK+7/z8/AobohlNyp9oqo1isRiLFi0CYMqUKWzfvh2AHTt2MHToUJ588knat2/PXXfdlckwMy4nk4LeaJZkJfs4ZCavABI1SjOanG6QTpT0KjtV9VhdfvnlvPzyy/To0YN///vf7L///gDceuut9O7dm969e3PXXXfxyCOPsGLFilR+BTlFt4+kRiu9ApDMScfVVbL7vPTSS7n00ksBOOyww3jttdeidX7/+98DcMMNN0TzDjjgAN55551qizMb5eSVgoiIpIeSgoiIRJQUREQkoqQgIiIRJQUREYkoKYiISERJQUREIkoKIlLjFBcXc+6559K2bVtat27N8OHD+frrr5kzZw6NGzemS5cuFBQU0LdvXz799NNMh5tVlBREpEZxd84//3wGDhzIe++9x3vvvcfWrVu59tprAejduzeLFy9myZIldO/enQceeCDDEWcXJQXJSbnQfYUELMVTIrNmzSIvL4+hQ4cCULduXf70pz8xYcIENm/eHK3n7nz55ZcVdq89evRofvzjH3PGGWcQi8V45plnuPbaazn22GPp169f1H/SokWLOPnkk+nWrRtnnnkma9euBeDhhx+me/fudO7cmUGDBrFlyxYgeNN6xIgRnHDCCbRu3Xq3cR4yTUlBclKyo3lloosFyaxly5bRrVu33eYdeOCBxGIxVq1axb/+9S+6dOnCUUcdxcyZMxk2bFiF5b3//vtMnz6dKVOmcPHFF3PKKafw9ttv07BhQ6ZPn8727du55pprmDRpEosWLWLYsGGMHDkSgPPPP58FCxbw1ltv0b59ex599NGo3LVr1zJv3jyef/55rrvuutR/EVWUk30fmVl/oH+bNm0yHYqIJFDdPU+5e9C7bBnzIbh99PzzzwPwhz/8gWuvvZaHHnqo3PLOOuss6tevz7HHHsvOnTvp168fAMceeyxFRUW8++67LF26lNNPPx2AnTt30rx5cwCWLl3KqFGj2LRpE5s3b+bMM8+Myh04cCB16tShQ4cOrFu3LjWVT4GcvFJQL6lSGyXb22ht72K7Y8eOLFy4cLd5X3zxBevWraNdu3a7zR8wYABz586tsLzvfOc7ANSpU4f69etHCadOnTrs2LEDd6djx44sXryYxYsX8/bbb/Piiy8CwW2i+++/n7fffpsbb7yRbdu27VUukFWdNuZkUhCpjZId9zlXu9hOldNOO40tW7YwYcIEIPjl/qtf/Yrhw4fTsGHD3dadN28e3/3ud/dpf+3atWP9+vW8+uqrAGzfvp1ly5YB8OWXX9K8eXO2b9/OE088sU/7qS5KCiJSo5gZzz77LJMmTaJt27Y0bdqUOnXqRPf5S9sUOnfuzOOPP86dd965T/tr0KABkyZN4re//S2dO3emS5cuvPLKKwDcfPPNfO973+P000/nmGOO2ee6VQfLpsuWyiosLPQ9LxOldjCztF9yt5r2NB/0/0H0xEuivV04vAtP3b845XHYGMNvTL6u1fHdVGTFihW0b98+Y/vf0yuvvMLgwYN55pln9mqArg3KOh5mtsjdC8taPycbmkVEknXCCSfU+ltqlaGkICK13vjx47nnnnt2m9erV69a+WKbkoKI1HpDhw6NXnar7dTQLFLD6NFV2RdKCpJV1H3Fvkv20VVAyUP2ottHklVKu6+Q9Eu2C5Cy3g6WmktXCiIiElFSEJEaJxvHUygqKqJTp04ALFy4kBEjRlTLfitLSUFEapRcGE+hsLCQe++9t9r3mwwlBRGpUbJpPIVFixbRuXNnjj/++N2Sz5w5c/j+97+fjurvMzU0i0ha3f3uMu5ZuTxl5f386A78ol3HcpcnO57Chg0b2H///bn11lsr3N/777/P7NmzWb58OccffzyTJ0/m9ttv57zzzmP69Omcc845XHPNNUyZMoVmzZrx97//nZEjRzJu3DiGDh3Kfffdx8knn8xvfvOblNQ/3ZQURCStftGuY4Un8VTLlvEUSkpK2LRpEyeffDIAl1xyCS+88EJK65oOSgoiUqN07NiRyZMn7zYvfjyFmTNnRvMHDBjAoEGDKiwv2fEUSrvOLrVp06acfJxXbQpSLfRSmlSXbBlP4aCDDqJx48bMmzcPQOMpiMTTmMpSXbJpPIXx48dz9dVXc/zxx++VkLJVVo2nYGYDgXOAQ4EH3P3FitbXeAq5I9N9/FdFro6nkPL9J3nsYrEYa9as4YUXXuCQQw4pd70GDRpQUFCQyhArpPEUsmw8BTMbB3wf+NTdO8XN7wfcA9QFHnH329z9OeA5M2sC3AFUmBREJP1KO9hLZj13TzjITnX/kNN4CpVTHbePHgP6xc8ws7rAA8BZQAdgsJl1iFtlVLhcsliy7QRqK8htyXawl8u3/saPH0+XLl12m66++upMh5URab9ScPe5ZhbbY3YPYJW7rwYws78B55rZCuA24AV3f6Os8szsCuAKgKOOOiptcUti6rxOagqNp/CtTDU0HwF8GPe5OJx3DdAXuMDMrixrQ3cf6+6F7l7YrFmz9EcqIlKLZOo9hbJuULq73wtkZ4cgIiK1QKauFIqBI+M+twQ+zlAsIiISylRSWAC0NbNWZtYAuAiYmuzGZtbfzMaWlJSkLUARkdoo7UnBzCYCrwLtzKzYzC5z9x3AcOAfwArgKXdflmyZ7j7N3a9o3LhxeoIWEamkCy64gNWrVwPw9NNP0759e0455ZR96hF1/fr1UV9L1SXtScHdB7t7c3ev7+4t3f3RcP4Mdz/a3b/r7rekOw4RkXRZtmwZO3fupHXr1gA8+uijPPjgg8yePXufym3WrBnNmzdn/vz5qQgzKermQkRqnKKiIo455hh+8pOf0KlTJ4YMGcLMmTPp1asXbdu25fXXX+err75i2LBhdO/eneOOO44pU6ZE2/bu3ZuuXbvStWvXqMuKOXPm0KdPHy644AKOOeYYhgwZEj2S/cQTT3DuuecCcNNNNzFv3jyuvPLKvbrLHj16NHfccUf0uVOnThQVFbFgwQIKCgrYtm0bX331FR07dmTp0qUADBw4sFr7TcrJXlLNrD/Qv02bNpkORUQSGD1nNGNeHrP7zOlVL+/Gk29kdJ/RCddbtWoVTz/9NGPHjqV79+48+eSTzJs3j6lTp3LrrbfSoUMHTj31VMaNG8emTZvo0aMHffv25dBDD+Wll14iLy+P9957j8GDB0dvYb/55pssW7aMFi1a0KtXL+bPn8+JJ57I/PnzGTx4MAA33HADs2bN4o477qCwsJA5c+YkjLV79+4MGDCAUaNGsXXrVi6++OJo6M7CwkJGjRpV5e+rsnIyKbj7NGBaYWHh5ZmORUQqNrrP6N1O4gsXLqSwsMxud1KqVatWHHvssUDQnfZpp52GmUXjIBQXFzN16tTol/u2bdv4z3/+Q4sWLRg+fDiLFy+mbt26rFy5MiqzR48etGzZEoAuXbpQVFTEiSeeyNq1a9nX96ZuuOEGunfvTl5e3m5DdR566KF8/HH1PZyZk0lBRCSR0nEQIBj7IH5chB07dlC3bl0mT55Mu3btdttu9OjRHHbYYbz11lvs2rWLvLy8MsusW7cuO3bsAKBhw4Zs27YtYUz16tVj165d0ef4bTZu3MjmzZvZvn0727ZtY//994/Wqc4eVtWmICK10plnnsl9990XtQu8+eabAJSUlNC8eXPq1KnD448/zs6dOxOW1b59e1atWpVwvVgsxhtvBD34vPHGG3zwwQfRsiuuuIKbb76ZIUOG8Nvf/jaav3LlyuhWUnXIyaSg9xREZF9df/31bN++nYKCAjp16sT1118PwM9+9jP++te/0rNnT1auXBn9Yq/IOeeck1TbwaBBg9i4cSNdunThz3/+M0cffTQAEyZMoF69evzoRz/iuuuuY8GCBcyaNQuA2bNnc84551S9opWVTO+H2Tp169bNJfXy8/OdYPiACqf8/PxMh5pWsalPufu3/+AS+cHVndMSB6OT2Xv2WL58eYXLFyxYUE2RVJ8tW7b49773Pd+xY0fKy+7du7dv3LixytuXdTyAhV7OeVVtCrIX9X4qUjkNGzZkzJgxfPTRRyntvXn9+vX88pe/pEmTJikrMxElBRGRFDjzzDNTXmazZs0YOHBgysutSE62KYiISHrkZFJQQ7OISHrkZFJwdYgnIpIWOZkUREQkPZQUREQq0KdPn6jvo7PPPptNmzZVuay7776bCRMmAPDOO+/QpUsXjjvuON5//30aNWpU5XL79u3L559/XuXt4+npIxGpVg0aNIhOssmsW1BQkOaIkjdjxowqb7tjxw7GjRsXvdH83HPPce655zJmzJgEWyZ2ySWX8OCDDzJy5Mh9LktXCiJSrQoKCigsLExq+uabb6q0j33pOnvr1q1cdNFFFBQU8MMf/pCtW7dG5cZiMT777DMg6NK6W7dudOzYkbFjx0brNGrUiJEjR9K5c2d69uzJunXrAJg1axZdu3alXr16zJgxg7vvvptHHnmEU045ZbfY9xyUZ/jw4Tz22GOUlJTQrl073n33XQAGDx7Mww8/DMCAAQOYOHFilb6rPeXklYK6zhbJHU9N/zOTXvhL1Qt4bPePF5z1Uy4856qEm1W16+y//OUv7LfffixZsoQlS5bQtWvXMssfN24cBx98MFu3bqV79+4MGjSIpk2b8tVXX9GzZ09uueUWrr32Wh5++GFGjRrF/Pnz6datGxDchrryyitp1KgRv/71r5P6Gho3bsz999/PpZdeys9//nM+//xzLr886Ci6SZMmfP3112zYsIGmTZsmVV55cjIpuLrOFskZF55zVVIn8bLsSzfbVe06e+7cuYwYMQIIrmrKu31177338uyzzwLw4Ycf8t5779G0aVMaNGgQ/dLv1q0bL730EgBr166lffv2VapLqdNPP52nn36aq6++mrfeemu3ZaVdbNfKpCAikkhVu84GMLMKy54zZw4zZ87k1VdfZb/99qNPnz5RN9j169ePtk9199q7du1ixYoVNGzYkI0bN0ZjO5Sul4outtWmUIvEYjHMLOGUn5+f6VBF0q68rrNPOumkaPjLpUuXsmTJkr22LSkpoUmTJuy333688847vPbaawn3l2z32vn5+Sxfvpyvv/6akpIS/vnPf0bL/vSnP9G+fXsmTpzIsGHD2L59OxB0bPrJJ58Qi8USlp+IkkItUtrRXaKpqKgo06GKpF15XWdfddVVbN68mYKCAm6//XZ69Oix17b9+vVjx44dFBQUcP3119OzZ8+E+zvrrLOYO3duwvWOPPJILrzwQgoKChgyZAjHHXccEIyr8Mgjj3DnnXfSu3dvTjrpJH73u98BsGjRInr27Em9eim4+ZPMSSJbJ3WdXTnB4ZZkqevsqknUdXZl1LRutgcOHOgrV65MebkjRozwmTNnlrmssl1n60pBRKSa3Hbbbaxduzbl5Xbq1InTTjstJWWpoVlEUs7dEzbWJiPZF92y7SW38rRr167Mhu19Vfpo6p68CuOi5GRS0HsKItkrLy8vel5+XxNDsif6ZN+Qrk3cnQ0bNpCXl1ep7XIyKbjeUxDJWi1btqS4uJj169dX2z4/++wzVqxYUW37yxV5eXm7PbaajJxMCrK7WCzGmjVrEq6nR02lOtSvX59WrVpV6z47dOigIWRTREmhBtCYyiKSKnr6SEREIkoKIiISUVIQEZGIkoKIiESUFEREJKKkICIikZxMCmbW38zGlpSUZDoUEZEaJSeTgrtPc/crGjdunOlQRERqlKSSgpn93MwOtMCjZvaGmZ2R7uBERJKRn5+f1ABSqRiEpqZL9kphmLt/AZwBNAOGArelLSoRkUooKipKagyWZLqDqe2STQqlXR2eDYx397fi5omISA2RbFJYZGYvEiSFf5jZAcCuBNuIiEiOSbZDvMuALsBq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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "if stat == 'ks':\n",
    "    id_best = np.argmax(flux_asym[np.isfinite(flux_asym)])\n",
    "else:\n",
    "    id_best = np.argmin(flux_asym[np.isfinite(flux_asym)])\n",
    "flux_val = flux_grid[np.isfinite(flux_asym)][id_best]\n",
    "final_limit = flux_val + dt_low\n",
    "flux_quiet = flux_vec[flux_vec <= final_limit]\n",
    "QB_mean = np.mean(flux_quiet)\n",
    "QB_medi = np.median(flux_quiet)\n",
    "\n",
    "\n",
    "cdf_lo_norm, cdf_hi_norm, cdf_hi_r_norm, x_lo, x_hi = compute_cdf(flux_grid, id_best, flux_vec, weight_vec, num_bins)\n",
    "\n",
    "\n",
    "plt.figure(0)\n",
    "plt.title(f'normalized CDFs for the best grid value: {id_best}')\n",
    "plt.plot(x_lo, cdf_lo_norm, color='mediumseagreen', label='cdf_lo')\n",
    "plt.plot(x_hi, cdf_hi_norm, color='hotpink', label='cdf_hi')\n",
    "plt.plot(x_lo, cdf_hi_r_norm, color='hotpink', label='cdf_hi_r')\n",
    "plt.vlines(flux_grid[id_best], ymin=0, ymax=1, color='mediumpurple', label=f'{n}th value')\n",
    "plt.vlines(flux_vec[0], ymin=0, ymax=1, color='indigo', label='flux_lo = flux_vec[0]')\n",
    "plt.vlines((flux_grid[id_best] - (flux_vec[0] - flux_grid[id_best])), ymin=0, ymax=1, color='indigo', label='flux_hi')\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('norm. counts')\n",
    "\n",
    "plt.figure(1)\n",
    "plt.title('observed flux and QB')\n",
    "c,v,p = plt.hist(flux_vec, bins=30, log=True, histtype= 'step', color='k', label='flux')\n",
    "plt.vlines(QB_mean, ymin=min(c), ymax=max(c), linewidth=2, color='cyan', label='QB_mean')\n",
    "plt.vlines(QB_medi, ymin=min(c), ymax=max(c), linewidth=1, color='lightseagreen', label='QB_medi')\n",
    "plt.vlines(np.mean(flux), ymin=min(c), ymax=max(c), linewidth=1, color='green', label='mean(flux)')\n",
    "plt.vlines(np.median(flux), ymin=min(c), ymax=max(c), linewidth=1, color='darkolivegreen', label='median(flux)')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel('flux')\n",
    "plt.ylabel('counts')\n",
    "\n",
    "plt.figure(2)\n",
    "plt.title('log10 of observed flux and QB')\n",
    "c,v,p = plt.hist(np.log10(flux_vec), bins=30, log=True, histtype= 'step', color='k', label='flux')\n",
    "plt.vlines(np.log10(QB_mean), ymin=min(c), ymax=max(c), linewidth=2, color='cyan', label='QB_mean')\n",
    "plt.vlines(np.log10(QB_medi), ymin=min(c), ymax=max(c), linewidth=1, color='lightseagreen', label='QB_medi')\n",
    "plt.vlines(np.log10(np.mean(flux)), ymin=min(c), ymax=max(c), linewidth=1, color='green', label='mean(flux)')\n",
    "plt.vlines(np.log10(np.median(flux)), ymin=min(c), ymax=max(c), linewidth=1, color='darkolivegreen', label='median(flux)')\n",
    "plt.legend()\n",
    "plt.xlabel('log(flux)')\n",
    "plt.ylabel('counts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "VfZtb0NgOorA"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "illustration_QB_M.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
